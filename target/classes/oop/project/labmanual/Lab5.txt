Question1: Create an Account class that stores customers name, acc-no and type of account. From this derive class current account and savings bank account. The program should be able to accept deposit, permit withdrawal, check for minimum balance penalty and deduct the same, compute and deposit interest. Update and display balance after each action. For savings bank account the facilities given are computing interest, withdraw facility. No interest on current bank account and should maintain a minimum balance and if balance is less than this level, service tax is imposed.
Hint1: Use inheritance to create a base Account class and derive SavingsAccount and CurrentAccount subclasses, implementing specific methods like interest computation, withdrawal handling, and minimum balance checks within each subclass.
Question2: Create a base class for student having registration number, name and age. From this class create two new class UG and PG student with semester and fees as its data members. Use proper member function for demonstrating inheritance. Display the details of students who took admission to UG course and PG course separately, total number of UG admissions and PG admissions.
Hint2: Create a base Student class with common properties like registrationNumber, name, and age. Extend this class to create UGStudent and PGStudent subclasses with additional properties for semester and fees. Use static counters in each subclass to track the number of admissions, and create methods to display details separately for UG and PG students.
Question3: Create a base class called Bank that provides functionality to get rate of interest. But, rate of interest varies according to banks. For example, SBI, ICICI and AXIS banks could provide 8%, 7% and 9% rate of interest. Write a Java program to calculate the interest for SBI, ICICI and AXIS banks, by demonstrating the concept of method overriding and dynamic method dispatch.
Hint3: Define a Bank class with a getInterestRate method, then create subclasses for SBI, ICICI, and AXIS that override this method with their specific interest rates. Use polymorphism to dynamically call the appropriate interest rate method for each bank type.